const Events = require('events');
const { sleep } = require('powercord/util');

module.exports = class Plugin extends Events {
  constructor () {
    super();
    this.ready = false;
    this.settings = powercord.api.settings.buildCategoryObject(this.pluginID);

    this.registered = {
      settings: [],
      commands: [],
      keybinds: [],
      routes: [],
      styles: []
    };
  }

  // Getters
  get dependencies () {
    return this.manifest.dependencies;
  }

  get optionalDependencies () {
    return this.manifest.optionalDependencies;
  }

  get effectiveOptionalDependencies () {
    const deps = this.manifest.optionalDependencies;
    return deps.filter(d => powercord.pluginManager.get(d) !== void 0);
  }

  get allDependencies () {
    return [ ...this.dependencies, ...this.optionalDependencies ];
  }

  get allEffectiveDependencies () {
    return [ ...this.dependencies, ...this.effectiveOptionalDependencies ];
  }

  // Internals
  async _load () {
    try {
      while (!this.allEffectiveDependencies.every(pluginName => powercord.pluginManager.get(pluginName).ready)) {
        await sleep(1);
      }

      if (typeof this.startPlugin === 'function') {
        await this.startPlugin();
      }

      this.ready = true;
      this.log('Plugin loaded');
    } catch (e) {
      this.error('An error occurred during initialization!', e);
      this.ready = true;
    }
  }

  async _unload () {
    this.registered.settings.forEach(tab => powercord.api.settings.unregisterTab(tab));
    this.registered.commands.forEach(command => powercord.api.commands.unregisterCommand(command));
    this.registered.keybinds.forEach(keybind => powercord.api.keybinds.unregisterKeybind(keybind));
    this.registered.routes.forEach(path => powercord.api.router.unregisterRoute(path));
    this.registered.styles.forEach(style => powercord.styleManager.get(style).remove());

    try {
      if (typeof this.pluginWillUnload === 'function') {
        await this.pluginWillUnload();
      }

      this.ready = false;
      this.log('Plugin unloaded');
    } catch (e) {
      this.error('An error occurred during shutting down! It\'s heavily recommended to reload Discord to ensure there is no conflicts.', e);
      powercord.pluginManager.requiresReload = true;
    }
  }

  // Utilities
  registerSettings (section, displayName, render, connectStore = true) {
    this.registered.settings.push(section);
    powercord.api.settings.registerTab(this.pluginID, section, displayName, render, connectStore);
  }

  registerCommand (command, aliases, description, usage, func) {
    this.registered.commands.push(command);
    powercord.api.commands.registerCommand(command, aliases || [], description, usage, func);
  }

  registerKeybind (id, name, description, func, keybind, global = false) {
    this.registered.keybinds.push(id);
    powercord.api.keybinds.registerKeybind(id, name, description, func, keybind, global);
  }

  registerRoute (path, render) {
    this.registered.routes.push(path);
    powercord.api.router.registerRoute(path, render);
  }

  updateKeybind (id, keybind) {
    this.registered.keybinds.push(id);
    powercord.api.keybinds.updateKeybind(id, keybind);
  }

  loadCSS (id, path) {
    if (path === void 0) {
      path = id;
      id = this.pluginID;
    }

    this.registered.styles.push(id);
    powercord.styleManager.loadPluginCSS(id, path);
  }

  // Logging
  log (...data) {
    console.log(`%c[Powercord:Plugin:${this.constructor.name}]`, 'color: #257dd4', ...data);
  }

  warn (...data) {
    console.warn(`%c[Powercord:Plugin:${this.constructor.name}]`, 'color: #257dd4', ...data);
  }

  error (...data) {
    console.error(`%c[Powercord:Plugin:${this.constructor.name}]`, 'color: #257dd4', ...data);
  }
};
